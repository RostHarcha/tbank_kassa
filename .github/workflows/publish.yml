name: Publish to PyPI and Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Python version from pyproject.toml
        id: python-version
        run: |
          python_version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['tool']['poetry']['dependencies']['python'].strip('^~<>= '))")
          echo "python-version=${python_version}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV

      - name: Install dependencies
        run: poetry install --no-root

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --username __token__ --password "$POETRY_PASSWORD"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload artifacts to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          file: dist/*
          file_glob: true
          release_name: ${{ github.ref_name }}
        env:
          python-version: ${{ env.python-version }}
